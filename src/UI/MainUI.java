/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package UI;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.LinkedList;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import databaseIO.Database;
import databaseIO.DatabaseAccess;
import databaseIO.Query;
import databaseIO.Table;

/**
 *
 * @author Abtuly
 */
public class MainUI extends javax.swing.JFrame {

   /**
    * Creates new form mainUI
    */
   public MainUI() {
      initComponents();
   }

   /**
    * This method is called from within the constructor to initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is always
    * regenerated by the Form Editor.
    */

   // <editor-fold defaultstate="collapsed" desc="Generated Code">
   private void initComponents() {

      jScrollPane1 = new javax.swing.JScrollPane();
      selectedTableContent = new javax.swing.JTable();
      updateBtn = new javax.swing.JButton();
      selectBtn = new javax.swing.JButton();
      insertBtn = new javax.swing.JButton();
      deleteBtn = new javax.swing.JButton();
      jScrollPane2 = new javax.swing.JScrollPane();
      databaseTables = new javax.swing.JTable();
      jLabel1 = new javax.swing.JLabel();
      jLabel2 = new javax.swing.JLabel();
      customCommandTF = new javax.swing.JTextField();
      jLabel4 = new javax.swing.JLabel();
      executeBtn = new javax.swing.JButton();
      resulatStateLabel = new javax.swing.JLabel();
      joinBtn = new javax.swing.JButton();
      setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

      jScrollPane1.setViewportView(selectedTableContent);

      updateBtn.setText("UPDATE");
      updateBtn.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            updateBtnActionPerformed(evt);
         }
      });

      selectBtn.setText("SELECT");
      selectBtn.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            selectBtnActionPerformed(evt);
         }
      });

      insertBtn.setText("INSERT");
      insertBtn.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            insertBtnActionPerformed(evt);
         }
      });

      deleteBtn.setText("DELETE");
      deleteBtn.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            deleteBtnActionPerformed(evt);
         }
      });

      joinBtn.setText("JOIN");
      joinBtn.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            joinBtnActionPerformed(evt);
         }
      });

      jScrollPane2.setViewportView(databaseTables);

      jLabel1.setText("Table Content");

      jLabel2.setText("Tables");

      customCommandTF.setText("");

      jLabel4.setText("custom SQL Commands");

      executeBtn.setText("EXECUTE");
      executeBtn.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            executeBtnActionPerformed(evt);
         }
      });

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
      getContentPane().setLayout(layout);
      layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                              .addGroup(layout.createSequentialGroup()
                                    .addContainerGap()
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 662,
                                          javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                          .addGroup(layout
                                                .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(deleteBtn, javax.swing.GroupLayout.Alignment.TRAILING,
                                                      javax.swing.GroupLayout.PREFERRED_SIZE, 92,
                                                      javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(insertBtn, javax.swing.GroupLayout.Alignment.TRAILING,
                                                      javax.swing.GroupLayout.PREFERRED_SIZE, 92,
                                                      javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(updateBtn, javax.swing.GroupLayout.Alignment.TRAILING,
                                                      javax.swing.GroupLayout.PREFERRED_SIZE, 92,
                                                      javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(selectBtn, javax.swing.GroupLayout.Alignment.TRAILING,
                                                      javax.swing.GroupLayout.PREFERRED_SIZE, 92,
                                                      javax.swing.GroupLayout.PREFERRED_SIZE))
                                          .addComponent(joinBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 92,
                                                javax.swing.GroupLayout.PREFERRED_SIZE)))
                              .addGroup(layout.createSequentialGroup()
                                    .addGap(6, 6, 6)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 118,
                                          javax.swing.GroupLayout.PREFERRED_SIZE))
                              .addGroup(layout.createSequentialGroup()
                                    .addGap(6, 6, 6)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 662,
                                          javax.swing.GroupLayout.PREFERRED_SIZE))
                              .addGroup(layout.createSequentialGroup()
                                    .addGap(6, 6, 6)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 118,
                                          javax.swing.GroupLayout.PREFERRED_SIZE))
                              .addGroup(layout.createSequentialGroup()
                                    .addContainerGap()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                          .addGroup(layout.createSequentialGroup()
                                                .addComponent(customCommandTF, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                      662, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(executeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 92,
                                                      javax.swing.GroupLayout.PREFERRED_SIZE))
                                          .addComponent(jLabel4)))
                              .addGroup(layout.createSequentialGroup()
                                    .addContainerGap()
                                    .addComponent(resulatStateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 662,
                                          javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(21, Short.MAX_VALUE)));
      layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23,
                              javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                              .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 240,
                                    javax.swing.GroupLayout.PREFERRED_SIZE)
                              .addGroup(layout.createSequentialGroup()
                                    .addComponent(selectBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 33,
                                          javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(updateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 33,
                                          javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(insertBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 33,
                                          javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 33,
                                          javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(joinBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 33,
                                          javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 23,
                              javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 96,
                              javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                              .addComponent(customCommandTF, javax.swing.GroupLayout.PREFERRED_SIZE, 33,
                                    javax.swing.GroupLayout.PREFERRED_SIZE)
                              .addComponent(executeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 33,
                                    javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(resulatStateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                        .addContainerGap()));
      initStyle();
      this.setVisible(true);

      // this.customCommandTF.setVisible(false);
      // this.executeBtn.setVisible(true);
      // this.updateBtn.setVisible(false);
      // this.jLabel4.setVisible(false);

      this.onClose();
      fillDatabaseTables();

      pack();

   }// </editor-fold>

   private void fillSelectedTableContent() {
      ResultSet rs = Query.GET_TABLE_CONTENT(Database.getTables().get(databaseTables.getSelectedRow()).getName());

      Table selectedTable = Database.getTables().get(databaseTables.getSelectedRow());

      int numberOfRaws = Query.GET_NUMBER_OF_ROWS(selectedTable.getName());
      int numberOfColumn = selectedTable.getColumnNames().size();
      String[][] data = new String[numberOfRaws][numberOfColumn];
      int row = 0, index = 1;
      try {
         // gets table content to 2d array
         while (rs.next()) {
            for (int i = 0; i < numberOfColumn; i++) {
               data[row][i] = rs.getString(index++);
            }
            row++;
            index = 1;
         }

      } catch (SQLException e) {
         Query.SQLExceptionProc(e);
      } catch (IndexOutOfBoundsException e1) {
         System.out.println(e1.getMessage());
      }
      DefaultTableModel model = new DefaultTableModel(data, selectedTable.getColumnNames().toArray()) {
         boolean[] canEdit = new boolean[] {
               false, false
         };

         public boolean isCellEditable(int rowIndex, int columnIndex) {
            return canEdit[columnIndex];
         }
      };
      selectedTableContent.setModel(model);

   }

   private void fillSelectedTableContent(ResultSet rs) {
      int numberOfRaws = -1, numberOfColumn = 0;
      try {
         numberOfRaws = Query.getRowCount(rs.getMetaData().getTableName(1));
         if (numberOfRaws == -1) {
            Query.getRowCount(Database.name);
         }
      } catch (SQLException e) {
         Query.SQLExceptionProc(e);
      }

      try {
         numberOfColumn = rs.getMetaData().getColumnCount();
      } catch (SQLException e2) {
         // TODO Auto-generated catch block
         Query.SQLExceptionProc(e2);
      }
      System.out.println(numberOfRaws);
      System.out.println(numberOfColumn);
      String[][] data = new String[numberOfRaws][numberOfColumn];
      int row = 0, index = 1;

      try {
         // gets table content to 2d array

         while (rs.next()) {
            for (int i = 0; i < numberOfColumn; i++) {
               data[row][i] = rs.getString(index++);
            }
            row++;
            index = 1;
         }

      } catch (SQLException e) {
         Query.SQLExceptionProc(e);
      } catch (IndexOutOfBoundsException e1) {
         System.out.println(e1.getMessage());
      }
      String[] str = new String[numberOfColumn];
      try {
         for (int i = 1, j = 0; i <= rs.getMetaData().getColumnCount(); i++, j++) {
            str[j] = rs.getMetaData().getColumnName(i);
         }
      } catch (SQLException e) {
         // TODO Auto-generated catch block

      }
      DefaultTableModel model = new DefaultTableModel(data, str) {
         boolean[] canEdit = new boolean[] {
               false, false
         };

         public boolean isCellEditable(int rowIndex, int columnIndex) {
            return canEdit[columnIndex];
         }
      };
      selectedTableContent.setModel(model);

   }

   private void updateBtnActionPerformed(java.awt.event.ActionEvent evt) {

      new UpdateUI(MainUI.selectedTableContent, Database.getTables().get(databaseTables.getSelectedRow())).run();
   }

   private void selectBtnActionPerformed(java.awt.event.ActionEvent evt) {
      fillSelectedTableContent();
   }

   private void insertBtnActionPerformed(java.awt.event.ActionEvent evt) {

      new InsetionUI(Database.getTables().get(databaseTables.getSelectedRow()));

   }

   private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {
      int selectedRow = MainUI.selectedTableContent.getSelectedRow();
      LinkedList<String> cells = new LinkedList<String>();
      for (int i = 0; i < MainUI.selectedTableContent.getColumnCount(); i++) {
         cells.add((String) MainUI.selectedTableContent.getModel().getValueAt(selectedRow, i));
      }
      String tableName = Database.getTables().get(this.databaseTables.getSelectedRow()).getName();
      String sql = "DELETE FROM " + tableName + " Where ";

      for (int i = 0; i < cells.size(); i++) {

         if (Database.getTables().get(this.databaseTables.getSelectedRow()).getDataType().get(i).contains("int")) {// is
                                                                                                                   // int
            if (i == (cells.size() - 1)) {
               sql += MainUI.selectedTableContent.getModel().getColumnName(i) + " = " + cells.get(i) + " ";
            } else {
               sql += MainUI.selectedTableContent.getModel().getColumnName(i) + " = " + cells.get(i) + " and ";
            }
         }
         if (!Database.getTables().get(this.databaseTables.getSelectedRow()).getDataType().get(i).contains("int")) {// is
                                                                                                                    // not
                                                                                                                    // int
            if (i == (cells.size() - 1)) {
               sql += MainUI.selectedTableContent.getModel().getColumnName(i) + " =  '" + cells.get(i) + "' ";
            } else {
               sql += MainUI.selectedTableContent.getModel().getColumnName(i) + " = '" + cells.get(i) + "' and ";
            }
         }

      }
      if (JOptionPane.showConfirmDialog(null,
            "Are you sure you want to delete this row\n" + cells.toString() + "\n from " + tableName, "delete alert",
            JOptionPane.WARNING_MESSAGE) == 0) {
         System.out.println(Query.executeUpdate(sql));
      }
      fillSelectedTableContent();
   }

   private void joinBtnActionPerformed(java.awt.event.ActionEvent evt) {
      new JoinUI().run();
   }

   private void executeBtnActionPerformed(java.awt.event.ActionEvent evt) {

      fillSelectedTableContent(Query.QUERY(this.customCommandTF.getText()));
   }

   public void initStyle() {
      /* Set the Nimbus look and feel */
      // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
      // (optional) ">
      /*
       * If Nimbus (introduced in Java SE 6) is not available, stay with the default
       * look and feel.
       * For details see
       * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
       */
      try {
         for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
            if ("Nimbus".equals(info.getName())) {
               javax.swing.UIManager.setLookAndFeel(info.getClassName());
               break;
            }
         }
      } catch (ClassNotFoundException ex) {
         java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      } catch (InstantiationException ex) {
         java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      } catch (IllegalAccessException ex) {
         java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      } catch (javax.swing.UnsupportedLookAndFeelException ex) {
         java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      }
      // </editor-fold>

      /* Create and display the form */
      // java.awt.EventQueue.invokeLater(new Runnable() {
      // public void run() {
      // new MainUI().setVisible(true);
      // }
      // });
   }

   public javax.swing.JLabel getResponseLabel() {
      return this.resulatStateLabel;
   }

   public void fillDatabaseTables() {
      int size = Database.getTables().size();
      String databaseTables[][] = new String[size][size];
      String columnName[] = { "Name" };// , "Row"
      for (int i = 0; i < databaseTables.length; i++) {
         databaseTables[i][0] = Database.getTables().get(i).getName();
         // databaseTables[i][1] =
         // Integer.toString(Database.getTables().get(i).getNumberOfRaws());
      }

      this.databaseTables.setModel(new DefaultTableModel(databaseTables, columnName) {
         boolean[] canEdit = new boolean[] {
               false, false
         };

         public boolean isCellEditable(int rowIndex, int columnIndex) {
            return canEdit[columnIndex];
         }
      });
   }

   void onClose() {
      this.addWindowListener(new java.awt.event.WindowAdapter() {
         @Override
         public void windowClosing(java.awt.event.WindowEvent windowEvent) {
            System.out.println("exited correctly");
            try {
               DatabaseAccess.getDatabaseConnection().close();
            } catch (SQLException e) {
               // TODO Auto-generated catch block
               JOptionPane.showMessageDialog(null, e.getErrorCode() + " : " + e.getMessage(), "SQL ERROR", 0);

            }
            System.exit(0);
         }
      });
   }

   public javax.swing.JTable getSelectedTableContent() {
      return selectedTableContent;
   }
   // Variables declaration - do not modify

   private javax.swing.JTextField customCommandTF;
   private javax.swing.JTable databaseTables;

   public javax.swing.JTable getDatabaseTables() {

      return databaseTables;
   }

   public static void displyResaltSet(ResultSet rs) {
      int numberOfRaws = -1, numberOfColumn = 0;
      try {
         numberOfRaws = Query.getRowCount(rs.getMetaData().getTableName(1));
         if (numberOfRaws == -1) {
            Query.getRowCount(Database.name);
         }
      } catch (SQLException e) {
         Query.SQLExceptionProc(e);
      }

      try {
         numberOfColumn = rs.getMetaData().getColumnCount();
      } catch (SQLException e2) {
         // TODO Auto-generated catch block
         Query.SQLExceptionProc(e2);
      }
      System.out.println(numberOfRaws);
      System.out.println(numberOfColumn);
      String[][] data = new String[numberOfRaws][numberOfColumn];
      int row = 0, index = 1;

      try {
         // gets table content to 2d array

         while (rs.next()) {
            for (int i = 0; i < numberOfColumn; i++) {
               data[row][i] = rs.getString(index++);
            }
            row++;
            index = 1;
         }

      } catch (SQLException e) {
         Query.SQLExceptionProc(e);
      } catch (IndexOutOfBoundsException e1) {
         System.out.println(e1.getMessage());
      }
      String[] str = new String[numberOfColumn];
      try {
         for (int i = 1, j = 0; i <= rs.getMetaData().getColumnCount(); i++, j++) {
            str[j] = rs.getMetaData().getColumnName(i);
         }
      } catch (SQLException e) {
         // TODO Auto-generated catch block

      }
      DefaultTableModel model = new DefaultTableModel(data, str) {
         boolean[] canEdit = new boolean[] {
               false, false
         };

         public boolean isCellEditable(int rowIndex, int columnIndex) {
            return canEdit[columnIndex];
         }
      };
      selectedTableContent.setModel(model);

   }

   protected static ResultSet toDisplay;
   private javax.swing.JButton updateBtn;
   private javax.swing.JButton selectBtn;
   private javax.swing.JButton insertBtn;
   private javax.swing.JButton deleteBtn;
   private javax.swing.JButton executeBtn;
   private javax.swing.JLabel jLabel1;
   private javax.swing.JLabel jLabel2;
   private javax.swing.JLabel jLabel4;
   private javax.swing.JScrollPane jScrollPane1;
   private javax.swing.JScrollPane jScrollPane2;
   private javax.swing.JLabel resulatStateLabel;
   protected static javax.swing.JTable selectedTableContent;
   private javax.swing.JButton joinBtn;
   // End of variables declaration

}
